{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hjemmeside","text":"<p>Velkommen til Kodeguiden sin introduksjon.</p>"},{"location":"Coding/","title":"Coding","text":""},{"location":"Coding/#what-is-this-coding-page","title":"What is this coding page?","text":"<p>This is where you can learn coding. You can find my projects on the left meny bar, where there will be a guide and an explanation on different section of the code, for your learning</p>"},{"location":"Coding/#what-is-required","title":"What is required?","text":"<p>Only thing that is required, is a platform where you can code python. Go to this LINK, to see what python platform is suggested.</p>"},{"location":"Coding/#blablabla","title":"Blablabla","text":"<p>Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla</p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/","title":"Automatic Feedback - Selenium","text":"<p>Before we start. Make sure you have Python downloaded, and running. If not, then make sure to go back on Homepage, and follow the steps on how to download Python. Also, be aware of that this is not written in pure Selenium code. This code has been simplified. </p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#plugins","title":"Plugins","text":"<p>First, we need to download our needed plugins via terminal, before we import them to our code.</p> <p><pre><code>pip install selenium\n</code></pre> <pre><code>pip install multiprocessing\n</code></pre> <pre><code>pip install python-dotenv \n</code></pre></p> <p>When plugins are installed, go ahead and import the needed plugins into your python code. <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport time\nimport multiprocessing\nimport os\nfrom dotenv import load_dotenv, dotenv_values\n</code></pre></p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#webdriver","title":"WebDriver","text":"<p>We're going to start by making our Selenium open a browser. Use one of the supported web drivers down below, that you want to be using. Remember to change \"YOURSEARCHENGINE\", to the webdriver that you want to be using. Also replace \"YOURLINK\" and add the link to the website you want to automate.</p> <ul> <li>Google Chrome</li> <li>Mozilla Firefox</li> <li>Safari</li> <li>Internet Explorer</li> <li>Microsoft Edge</li> </ul> <p><pre><code>def run_selenium_code():\n    driver = webdriver.YOURSEARCHENGINE()\n    driver.get(\"YOURLINK\")\n</code></pre> Example: <pre><code>def run_selenium_code():\n    driver = webdriver.Firefox()\n    driver.get(\"https://google.com\")\n</code></pre></p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#action-methods","title":"Action Methods","text":"<p>This code handles clicking an element identified by the XPath. This is a smart way to make your code shorter, more clear and easier to code.  This code will be standard, so there wont be anything to change here.</p> <pre><code>    def click_element(xpath):\n        while True:\n            try:\n                driver.find_element(By.XPATH, xpath).click()\n                time.sleep(1)\n                break\n            except:\n                time.sleep(0.1)\n                continue\n\n\n    def send_keys(xpath, keys):\n        while True:\n            try:\n                driver.find_element(By.XPATH, xpath).send_keys(keys)\n                time.sleep(1)\n                break\n            except:\n                time.sleep(0.1)\n                continue\n\n    time.sleep(1)\n</code></pre>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#elements","title":"Elements","text":"<p>Elements are webpage components like buttons or text boxes that Selenium lets you find and control. With Selenium, you locate these parts and perform actions on them, such as clicking or entering text, enabling automation on websites. We suggest using XPath as used in this documentation. Some other common ones include:</p> <ul> <li>CSS Selectors</li> <li>ID</li> <li>Class Name </li> <li>XPath</li> <li>Name</li> <li>Link Text and Partial Link Text</li> <li>Tag Name</li> <li>Accessibility Locators</li> </ul>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#click-element","title":"Click Element","text":"<p>In real Selenium code, you wouldn't directly use 'click_element(' ')' But this is function written to simplify way to indicate the action of clicking on an element using its XPath locator. Remember to chagne \"YOURXPATH\" to the XPath you want to indicate and click. <pre><code>click_element('YOURXPATH')\n</code></pre></p> <p>Example: <pre><code>click_element('/html/body/div[4]/div[2]/div')\n</code></pre></p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#send-keys","title":"Send Keys","text":"<p>This doesnt do the same as a Click Element function, but its intended to simplify your code as much. SendKEys function locates first a text box using XPath, and type in the following text that is entered. Change the text that you want to be written in \"YOURTEXT\". Remember to chagne \"YOURXPATH\" to the XPath you want to indicate and click. <pre><code>send_keys('YOURXPATH', 'YOURTEXT')\n</code></pre> Example: <pre><code>send_keys('/html/div/ul/div/textarea', 'Hello World')\n</code></pre></p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#iframe","title":"iFrame","text":"<p>Not all websited uses iFrame, but they are quite common. Websites use iFrames to integrate external content or to segregate sections of a webpage. If so you need to change the iFrame you are using, so your code can find the XPath to the element you want to execute an action on. <pre><code>driver.switch_to.frame(driver.find_element(By.XPATH, 'YOURXPATHIFRAME'))\n</code></pre> Example: <pre><code>driver.switch_to.frame(driver.find_element(By.XPATH, '/html/body/div[2]/div/iframe'))\n</code></pre></p>"},{"location":"Coding/01-Feedback%20Selenium%20Coding/#parallel-selenium-runner","title":"Parallel Selenium Runner","text":"<p>This code continously runs a loop where it sets the number of threads, to create threads for executing the 'run_selenium_code()' function concurrently, waits for these threads to finish, increments a counter variable 'f' by the number of threads and prints its value, then pauses the program for 0.2 seconds before restarting the loop.  Change \"YOURNUMTHREADS\", to how many times you want to simultaneously execute the Selenium code. <pre><code>if __name__ == '__main__':\n    num_threads = YOURNUMTHREADS\n\n    while True:\n        threads = []\n\n        for _ in range(num_threads):\n            thread = threading.Thread(target=run_selenium_code())\n            threads.append(thread)\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        f += (num_threads)\n        print(f)\n        time.sleep(0.2)\n</code></pre> Example: <pre><code>if __name__ == '__main__':\n    num_threads = 2\n\n    while True:\n        threads = []\n\n        for _ in range(num_threads):\n            thread = threading.Thread(target=run_selenium_code())\n            threads.append(thread)\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        f += (num_threads)\n        print(f)\n        time.sleep(0.2)\n</code></pre> GitHub</p> <p></p>"},{"location":"Coding/02-Security%20Camera%20-%20Cv2/","title":"Security Camera - Cv2","text":""},{"location":"Coding/02-Security%20Camera%20-%20Cv2/#plugins","title":"Plugins","text":"<p>First, start by adding the needed plugins for our program to work. </p>"},{"location":"User%20Guide/","title":"User Guide","text":""},{"location":"User%20Guide/#what-is-user-guide-page","title":"What is user guide page?","text":"<p>This is where you can get a documentation of one of my projects. You can simply open and edit an project, to fit your preferances. You dont do much coding.</p>"},{"location":"User%20Guide/#what-is-required","title":"What is required?","text":"<p>Only thing that is required, is a platform where you can code python. Go to this LINK, to see what python platform is suggested.</p>"},{"location":"User%20Guide/#blablabla","title":"Blablabla","text":"<p>Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla  bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla Blablabla bablab bla bla blablabla</p>"},{"location":"User%20Guide/01-Feedback%20Selenium%20BrukerGuide/","title":"Selenium Brukerguide","text":"<p>This is a documentation of how you get a project up and running in short time.</p> <p>Open the link down below, and download and then open the project:  Github Feedback Selenium Project</p>"},{"location":"User%20Guide/01-Feedback%20Selenium%20BrukerGuide/#setup","title":"Setup","text":"<p>If you have downloaded and opened the project. Type in the following in your terminal. <pre><code>pip install requirements.txt\n</code></pre>  Once all the plugins have been installed. Make sure to change the \"Name\" and \"PhoneNum\", so that the code is personally fit for your use. You will find this line of code on row 98. <pre><code>#Telefon\nsend_keys('/html/body/div[4]/div/div/ul/li[23]/div[1]/div[2]/div[2]/input', os.getenv(\"Name\" + \"PhoneNum\"))\nclick_element('/html/body/div[4]/div/div/ul/li[23]/div[1]/div[2]/div[3]')\n</code></pre>  Code will now run 5 times, at the same time. Due to the default set 5 time multiprocessing.  You can change this ,by changhign the numbmer that is visible down below, at \"num_processes = 5\"</p> <pre><code>if __name__ == '__main__':\n    num_processes = 5\n    while True:\n</code></pre>"},{"location":"User%20Guide/01-Foocus/","title":"Foocus Installation","text":""},{"location":"User%20Guide/01-Foocus/#what-is-foocus","title":"What is Foocus?","text":"<p>Fooocus is an image generating software (based on Gradio).</p> <p>Fooocus is a rethinking of Stable Diffusion and Midjourney\u2019s designs:</p> <p>Learned from Stable Diffusion, the software is offline, open source, and free.</p> <p>Learned from Midjourney, the manual tweaking is not needed, and users only need to focus on the prompts and images.</p>"},{"location":"User%20Guide/01-Foocus/#information","title":"Information","text":"<p>Installation guide on how to install Foocus. Keep in mind, that this requires a NVIDIA driver. Installation could take multible GB, so it may take a while. Here is the link for the github, to the creator of Foocus. You can also find further installation guidance for other platforms aswell.</p> <p>Foocus Github Page</p>"},{"location":"User%20Guide/01-Foocus/#setup","title":"Setup","text":"<p>Clone the repo. <pre><code>git clone https://github.com/lllyasviel/Foocus.git\n</code></pre> Now activate scripts on your computer. (Needed) <pre><code>Set-ExecutionPolicy bypass\n</code></pre> Create a virtual enviroment for python <pre><code>python -m venv foocus_env\n</code></pre> Enter Foocus_env file <pre><code>cd .\\foocus_env\\\n</code></pre> Activate a script, inside of Scripts. <pre><code>Scripts/activate\n</code></pre> Go back to previous cd, by doing this. Previous cd is going to be Foocus-Main. <pre><code>cd ..\n</code></pre> And then install the packages.  <pre><code>pip install -r requirements_versions.txt\n</code></pre> When that is done. Run this python script. This will automatically download the defult models in the backgroud. These files are multible GB large, so it may take a while. <pre><code>python entry_with_update.py\n</code></pre> Installation should start. And when its finished. You can go ahead and create your own images.</p>"}]}